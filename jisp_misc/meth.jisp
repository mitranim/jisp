[[[[SomeCls].property].method].method]
[SomeCls].property.[method].[method]
[SomeCls].property[.method][.method]
[-> [SomeCls] .property [.method] [.method]]
[.method [.method [.property [SomeCls]]]]

[[[[[[arbitrary_expr]]]]] arg arg arg arg arg]


[Struct Blah
  [field id Int]
  [field name Str]
]
->
[def Blah [Array Byte [+ [sizeof Int] [sizeof Str]]]]
[def Blah [Tuple Int Str]]
[defmethod Blah.id [ptr] [load [+ ptr 0]]]
[defmethod Blah.name [ptr] [load [+ ptr [sizeof Int]]]]

[def blah [Blah]]
blah.name
blah.name = `blah`

blah.name_get[]
blah.name_set[`blah`]

blah.name[]
blah.name[`blah`]

blah.name
blah.name[`blah`]

blah.name
blah.name `blah`


one two three four five six seven

one (two three four five) six seven

one (two three four five) (six seven)

one (two three) (four five six) seven

one:   two three four five six seven
↑↑↑ fn ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ args




one.two[].three[].four[]
one.two.three.four

[SomeCls]
.property
.[method]
.[method]

[SomeCls]
.property
[.method]
[.method]

[SomeCls]
.property
[../../../↑.method]
[↑.method]

←↓↑→

; some_blah.some_method[]
; [some_blah some_method more_stuff]

[SomeCls.property blah]

[use `jisp:prelude` p]


p.global.console.log
->
new Path().setNodes([`p`, `global`, `console`, `log`])

p.global.console.log
->
(((p).global).console).log
->
new Access()
  .setExpr(
    new Access()
      .setExpr(
        new Access().setExpr(`p`).setKey(`global`)
      )
      .setKey(`console`)
  )
  .setKey(`log`)


[p.global.console.log `blah`]
->
[globalThis.console.log `blah`]

[p.ok.toString]
->
[true.toString]


[console.log `blah`]
console.[log `blah`]
console[.log `blah`]

[pre.const blah 123]
pre.[const blah 123]
pre[.const blah 123]

[class CallOpt
  [extend [MixInsp.goc a.Emp]]

  [prototype
    [fn callOptFromStr [src]
      [const mat [[this.req src a.isStr].split ` `]]
      [const syntax ...]
      [const time ...]
      [const style ...]
      [const out ...]

      [
        [
          [
            [
              [this].setCallStyle syntax
            ].setCallTime time
          ].setCallSyntax style
        ].setCallOut out
      ]
    ]

    [fn callOptFromStr [src]
      [const mat [this.req src a.isStr].[split ` `]]
      [const syntax ...]
      [const time ...]
      [const style ...]
      [const out ...]

      [this]
      .[setCallStyle syntax]
      .[setCallTime time]
      .[setCallSyntax style]
      .[setCallOut out]
    ]

    [fn callOptFromStr [src]
      [const mat [this.req src a.isStr] [.split ` `]]
      [const syntax ...]
      [const time ...]
      [const style ...]
      [const out ...]

      [this]
      [.setCallStyle syntax]
      [.setCallTime time]
      [.setCallSyntax style]
      [.setCallOut out]
    ]

    [fn callOptFromStr [src]
      [const mat [this.req src a.isStr] [←.split ` `]]
      [const syntax ...]
      [const time ...]
      [const style ...]
      [const out ...]

      [this]
      [↑.setCallStyle syntax]
      [↑.setCallTime time]
      [↑.setCallSyntax style]
      [↑.setCallOut out]
    ]

    [fn callOptFromStr [src]
      [const mat [this.req src a.isStr] [.split ` `]]
      [const syntax ...]
      [const time ...]
      [const style ...]
      [const out ...]

      [-> [this]
        [.setCallStyle syntax]
        [.setCallTime time]
        [.setCallSyntax style]
        [.setCallOut out]
      ]
    ]

    fn [callOptFromStr [src]
      const [mat this.req [src a.isStr] .split [` `]]
      const [syntax ...]
      const [time ...]
      const [style ...]
      const [out ...]

      this []
      .setCallStyle [syntax]
      .setCallTime [time]
      .setCallSyntax [style]
      .setCallOut [out]
    ]
  ]
]
