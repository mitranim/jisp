use.mac `jisp:prelude.mjs` ...
use `jisp:core.mjs` c
declare globals

const PORT 5613
const BASE `/jisp/`
const Deno globalThis.Deno

func
  contentType src
  c.reqStr src
  guard
    src.endsWith `.css`
    ' `text/css`
  guard
    src.endsWith `.html`
    ' `text/html`
  guard
    src.endsWith `.json`
    ' `application/json`
  guard
    or
      src.endsWith `.js`
      src.endsWith `.mjs`
    ' `application/javascript`
  ' void

func
  methodNotAllowed meth path
  new Response
    + `method not allowed: ` meth ` ` path
    # : let status 405

func
  notFound meth path
  new Response
    + `not found: ` meth ` ` path
    # : let status 404

func.async
  response req
  const url : new URL req.url
  guard
    neq req.method `GET`
    methodNotAllowed req.method url.pathname

  let path url.pathname
  guard
    not : path.startsWith BASE
    notFound req.method url.pathname

  set path : or
    path.slice BASE.length
    ' `index.html`

  const type : contentType path
  new Response
    await : Deno.readTextFile path
    and type : # : let headers : # : let content-type type

func
  errRes err
  new Response err.stack : # : let status 500

func.async
  serveConn conn
  loop.iter.await
    const eve : Deno.serveHttp conn
    const res : response eve.request
    eve.respondWith : res.catch errRes
  ' void

const lis : Deno.listen : # : let port PORT

console.log : + `listening on http://localhost:` PORT BASE

loop.iter.await
  const conn lis
  const res : serveConn conn
  res.catch console.error
