%YAML 1.2
---
version: 2
extends: Packages/jisp/jisp_base.sublime-syntax
scope: source.jisp.delim
file_extensions: [jisp]

variables:
  # SYNC[delim].
  delim_chars: '\s\{\}\[\]\(\)'

contexts:
  main:
    - include: delim-match
    - include: number-match
    - include: string-match
    - include: sym-match

  delim-match:
    - include: braces-match
    - include: brackets-match
    - include: parens-match

  braces-match:
    - match: \{
      scope: punctuation.section.braces.begin.jisp
      push: [braces-meta, braces-pop, list-head-pop, nonblank-pop]
    - match: \}
      scope: punctuation.section.braces.end.jisp invalid.illegal.jisp

  brackets-match:
    - match: \[
      scope: punctuation.section.brackets.begin.jisp
      push: [brackets-meta, brackets-pop, list-head-pop, nonblank-pop]
    - match: \]
      scope: punctuation.section.brackets.end.jisp invalid.illegal.jisp

  parens-match:
    - match: \(
      scope: punctuation.section.parens.begin.jisp
      push: [parens-meta, parens-pop, list-head-pop, nonblank-pop]
    - match: \)
      scope: punctuation.section.parens.end.jisp invalid.illegal.jisp

  braces-pop:
    - include: brace-pop
    - include: main

  brackets-pop:
    - include: bracket-pop
    - include: main

  parens-pop:
    - include: paren-pop
    - include: main

  brace-pop:
    - match: \}
      scope: punctuation.section.braces.end.jisp
      pop: 1

  bracket-pop:
    - match: \]
      scope: punctuation.section.brackets.end.jisp
      pop: 1

  paren-pop:
    - match: \)
      scope: punctuation.section.parens.end.jisp
      pop: 1

  braces-meta:
    - meta_content_scope: meta.block.jisp meta.braces.jisp
    - include: now-pop

  brackets-meta:
    - meta_content_scope: meta.block.jisp meta.brackets.jisp
    - include: now-pop

  parens-meta:
    - meta_content_scope: meta.block.jisp meta.parens.jisp
    - include: now-pop

  list-head-pop:
    - include: call-known-maybe-pop
    - include: call-unknown-maybe-pop
    - include: sym-namespace-match
    - include: now-pop

  call-known-maybe-pop:
    - include: call-use-pop
    - include: call-const-pop
    - include: call-let-pop
    - include: call-func-pop
    - include: call-fn-pop
    - include: call-class-pop

  call-unknown-maybe-pop:
    - match: '{{sym_segment_break_begin}}[{{sym_segment_chars}}]+{{sym_break_end}}'
      scope: variable.function.jisp
      set: req-delim-pop

  call-use-pop:
    - match: '{{sym_segment_break_begin}}use{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: [use-addr-pop, sym-rest-pop]

  # Semi-placeholder. Instead of special-case string support, we should pop an
  # arbitrary expression here.
  use-addr-pop:
    - match: '({{string_backtick_delim}})[^{{string_backtick_delim}}]*({{string_backtick_delim}})(?!{{string_backtick_delim}})'
      scope: string.quoted.other.jisp
      captures:
        1: punctuation.definition.string.begin.jisp
        2: punctuation.definition.string.end.jisp
      set: [use-decl-pop, req-delim-pop]

    - match: '({{string_double_delim}})[^{{string_double_delim}}]*({{string_double_delim}})(?!{{string_double_delim}})'
      scope: string.quoted.double.jisp
      captures:
        1: punctuation.definition.string.begin.jisp
        2: punctuation.definition.string.end.jisp
      set: [use-decl-pop, req-delim-pop]

    - include: nonblank-pop

  use-decl-pop:
    - match: '{{ident_unqual}}'
      scope: meta.binding.name.jisp variable.other.jisp
      set: req-delim-pop
    - match: '{{sym_unqual}}'
      scope: keyword.operator.jisp
      set: req-delim-pop
    - include: nonblank-pop

  call-const-pop:
    - match: '{{sym_segment_break_begin}}const{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: [param-pop, sym-rest-pop]

  call-let-pop:
    - match: '{{sym_segment_break_begin}}let{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: [param-pop, sym-rest-pop]

  call-func-pop:
    - match: '{{sym_segment_break_begin}}func{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: [func-sig-pop, nonblank-pop, sym-rest-pop]

  func-sig-pop:
    - match: \{
      scope: punctuation.section.braces.begin.jisp
      push: [braces-meta, params-brace-pop, func-name-pop, nonblank-pop]
    - match: \[
      scope: punctuation.section.brackets.begin.jisp
      push: [brackets-meta, params-bracket-pop, func-name-pop, nonblank-pop]
    - match: \(
      scope: punctuation.section.parens.begin.jisp
      push: [parens-meta, params-paren-pop, func-name-pop, nonblank-pop]
    - include: func-name-pop

  func-name-pop:
    - include: sym-namespace-match
    - match: '{{sym_unqual}}'
      scope: entity.name.function.jisp
      set: req-delim-pop
    - include: now-pop

  param-match:
    - match: '{{sym_unqual}}'
      scope: variable.parameter.jisp
      push: req-delim-pop
    - match: \{
      scope: punctuation.section.braces.begin.jisp
      push: [braces-meta, params-brace-pop, list-head-pop]
    - match: \[
      scope: punctuation.section.brackets.begin.jisp
      push: [brackets-meta, params-bracket-pop, list-head-pop]
    - match: \(
      scope: punctuation.section.parens.begin.jisp
      push: [parens-meta, params-paren-pop, list-head-pop]
    - include: main

  param-pop:
    - match: '{{sym_unqual}}'
      scope: variable.parameter.jisp
      set: req-delim-pop
    - match: \{
      scope: punctuation.section.braces.begin.jisp
      set: [braces-meta, params-brace-pop, list-head-pop]
    - match: \[
      scope: punctuation.section.brackets.begin.jisp
      set: [brackets-meta, params-bracket-pop, list-head-pop]
    - match: \(
      scope: punctuation.section.parens.begin.jisp
      set: [parens-meta, params-paren-pop, list-head-pop]
    - include: nonblank-pop

  params-brace-pop:
    - include: brace-pop
    - include: param-match

  params-bracket-pop:
    - include: bracket-pop
    - include: param-match

  params-paren-pop:
    - include: paren-pop
    - include: param-match

  call-fn-pop:
    - match: '{{sym_segment_break_begin}}fn{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: sym-rest-pop

  call-class-pop:
    - match: '{{sym_segment_break_begin}}class{{sym_segment_break_end}}'
      scope: keyword.declaration.jisp
      set: [class-sig-pop, nonblank-pop, sym-rest-pop]

  class-sig-pop:
    - match: \{
      scope: punctuation.section.braces.begin.jisp
      push: [braces-meta, braces-pop, class-name-pop, nonblank-pop]
    - match: \[
      scope: punctuation.section.brackets.begin.jisp
      push: [brackets-meta, brackets-pop, class-name-pop, nonblank-pop]
    - match: \(
      scope: punctuation.section.parens.begin.jisp
      push: [parens-meta, parens-pop, class-name-pop, nonblank-pop]
    - include: class-name-pop

  class-name-pop:
    - include: sym-namespace-match
    - match: '{{sym_unqual}}'
      scope: entity.name.class.jisp
      set: req-delim-pop
    - include: now-pop

  req-delim-pop:
    - match: '[^{{delim_chars}}]+'
      scope: invalid.illegal.jisp
      pop: 1
    - include: now-pop

  nonblank-pop:
    - match: (?=\S)
      pop: 1

  now-pop:
    - match: ''
      pop: 1
